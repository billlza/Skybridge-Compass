package com.yunqiao.sinan

import android.Manifest
import android.app.AlertDialog
import android.content.Intent
import android.content.pm.PackageManager
import android.net.Uri
import android.os.Build
import android.os.Bundle
import android.provider.Settings
import android.util.Log
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Error
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import androidx.core.view.WindowCompat
import androidx.lifecycle.lifecycleScope
import kotlinx.coroutines.*
import kotlinx.coroutines.delay
import com.yunqiao.sinan.ui.screen.MainScreen
import com.yunqiao.sinan.ui.theme.YunQiaoSiNanTheme
import kotlinx.coroutines.*
import java.util.concurrent.atomic.AtomicBoolean
import kotlin.Exception

class MainActivity : ComponentActivity() {
    
    companion object {
        private const val TAG = "MainActivity"
        private const val PERMISSION_REQUEST_CODE = 1001
    }
    
    // Manager初始化相关状态
    private var initializationProgress by mutableStateOf(0.0f)
    private var initializationMessage by mutableStateOf("准备初始化...")
    private var isInitializationComplete by mutableStateOf(false)
    private var initializationError by mutableStateOf<String?>(null)
    
    // Manager依赖管理
    data class ManagerDependency(
        val name: String,
        val dependencies: List<String> = emptyList(),
        val isOptional: Boolean = false,
        val initFunction: suspend () -> Boolean,
        var isInitialized: AtomicBoolean = AtomicBoolean(false),
        var initializationError: String? = null
    )
    
    // 定义Manager依赖关系
    private val managerDependencies = mapOf(
        "Core" to ManagerDependency(
            name = "Core",
            dependencies = emptyList(),
            isOptional = false,
            initFunction = ::initializeCoreManager
        ),
        "Network" to ManagerDependency(
            name = "Network",
            dependencies = listOf("Core"),
            isOptional = false,
            initFunction = ::initializeNetworkManager
        ),
        "Storage" to ManagerDependency(
            name = "Storage",
            dependencies = listOf("Core"),
            isOptional = false,
            initFunction = ::initializeStorageManager
        ),
        "Auth" to ManagerDependency(
            name = "Auth",
            dependencies = listOf("Network", "Storage"),
            isOptional = false,
            initFunction = ::initializeAuthManager
        ),
        "Location" to ManagerDependency(
            name = "Location",
            dependencies = listOf("Core"),
            isOptional = true,
            initFunction = ::initializeLocationManager
        ),
        "Notification" to ManagerDependency(
            name = "Notification",
            dependencies = listOf("Core"),
            isOptional = true,
            initFunction = ::initializeNotificationManager
        ),
        "Media" to ManagerDependency(
            name = "Media",
            dependencies = listOf("Storage"),
            isOptional = true,
            initFunction = ::initializeMediaManager
        ),
        "AI" to ManagerDependency(
            name = "AI",
            dependencies = listOf("Network", "Auth"),
            isOptional = true,
            initFunction = ::initializeAIManager
        ),
        "Sync" to ManagerDependency(
            name = "Sync",
            dependencies = listOf("Network", "Auth", "Storage"),
            isOptional = true,
            initFunction = ::initializeSyncManager
        )
    )
    
    // 定义所需权限列表
    private val requiredPermissions = mutableListOf<String>().apply {
        // 基础权限
        add(Manifest.permission.INTERNET)
        add(Manifest.permission.ACCESS_NETWORK_STATE)
        add(Manifest.permission.WAKE_LOCK)
        
        // 位置权限
        add(Manifest.permission.ACCESS_FINE_LOCATION)
        add(Manifest.permission.ACCESS_COARSE_LOCATION)
        
        // Android 13+ 新权限
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            add(Manifest.permission.POST_NOTIFICATIONS)
        }
        
        // 存储权限
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            add(Manifest.permission.READ_MEDIA_IMAGES)
            add(Manifest.permission.READ_MEDIA_VIDEO)
            add(Manifest.permission.READ_MEDIA_AUDIO)
        } else {
            add(Manifest.permission.READ_EXTERNAL_STORAGE)
            if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.Q) {
                add(Manifest.permission.WRITE_EXTERNAL_STORAGE)
            }
        }
    }
    
    // 权限请求启动器
    private val permissionLauncher = registerForActivityResult(
        ActivityResultContracts.RequestMultiplePermissions()
    ) { permissions ->
        handlePermissionResults(permissions)
    }
    
    // 设置页面启动器
    private val settingsLauncher = registerForActivityResult(
        ActivityResultContracts.StartActivityForResult()
    ) {
        // 从设置页面返回后重新检查权限
        checkAndRequestPermissions()
    }
    
    private var isInitialized = false
    private var hasPermissionDenied = false
    
    override fun onCreate(savedInstanceState: Bundle?) {
        Log.d(TAG, "onCreate started")
        
        try {
            // 初始化基础设置
            initializeBasicSetup(savedInstanceState)
            
            // 检查并请求权限
            checkAndRequestPermissions()
            
        } catch (exception: Exception) {
            Log.e(TAG, "onCreate failed", exception)
            handleInitializationFailure(exception)
        }
    }
    
    /**
     * 初始化基础设置
     */
    private fun initializeBasicSetup(savedInstanceState: Bundle?) {
        try {
            enableEdgeToEdge()
            super.onCreate(savedInstanceState)
            
            // 设置状态栏透明
            WindowCompat.setDecorFitsSystemWindows(window, false)
            
            Log.d(TAG, "Basic setup completed successfully")
        } catch (exception: Exception) {
            Log.e(TAG, "Failed to initialize basic setup", exception)
            throw exception
        }
    }
    
    /**
     * 检查并请求权限
     */
    private fun checkAndRequestPermissions() {
        Log.d(TAG, "Checking permissions")
        
        try {
            val deniedPermissions = requiredPermissions.filter { permission ->
                ContextCompat.checkSelfPermission(this, permission) != PackageManager.PERMISSION_GRANTED
            }
            
            if (deniedPermissions.isEmpty()) {
                Log.d(TAG, "All permissions granted")
                initializeApplication()
            } else {
                Log.d(TAG, "Requesting permissions: $deniedPermissions")
                permissionLauncher.launch(deniedPermissions.toTypedArray())
            }
        } catch (exception: Exception) {
            Log.e(TAG, "Failed to check permissions", exception)
            // 权限检查失败时使用降级模式
            initializeApplicationWithDegradedMode()
        }
    }
    
    /**
     * 处理权限请求结果
     */
    private fun handlePermissionResults(permissions: Map<String, Boolean>) {
        Log.d(TAG, "Permission results: $permissions")
        
        try {
            val deniedPermissions = permissions.filter { !it.value }.keys
            val permanentlyDenied = deniedPermissions.filter { permission ->
                !ActivityCompat.shouldShowRequestPermissionRationale(this, permission)
            }
            
            when {
                deniedPermissions.isEmpty() -> {
                    Log.d(TAG, "All permissions granted after request")
                    hasPermissionDenied = false
                    initializeApplication()
                }
                
                permanentlyDenied.isNotEmpty() -> {
                    Log.w(TAG, "Permanently denied permissions: $permanentlyDenied")
                    hasPermissionDenied = true
                    showPermissionPermanentlyDeniedDialog(permanentlyDenied.toList())
                }
                
                else -> {
                    Log.w(TAG, "Some permissions denied: $deniedPermissions")
                    hasPermissionDenied = true
                    showPermissionRationaleDialog(deniedPermissions.toList())
                }
            }
        } catch (exception: Exception) {
            Log.e(TAG, "Failed to handle permission results", exception)
            initializeApplicationWithDegradedMode()
        }
    }
    
    /**
     * 显示权限理由对话框
     */
    private fun showPermissionRationaleDialog(deniedPermissions: List<String>) {
        try {
            val message = buildString {
                append("应用需要以下权限才能正常运行：\n\n")
                deniedPermissions.forEach { permission ->
                    append("• ${getPermissionDescription(permission)}\n")
                }
                append("\n是否重新请求权限？")
            }
            
            AlertDialog.Builder(this)
                .setTitle("权限请求")
                .setMessage(message)
                .setPositiveButton("重新请求") { _, _ ->
                    permissionLauncher.launch(deniedPermissions.toTypedArray())
                }
                .setNegativeButton("使用基础功能") { _, _ ->
                    initializeApplicationWithDegradedMode()
                }
                .setCancelable(false)
                .show()
        } catch (exception: Exception) {
            Log.e(TAG, "Failed to show permission rationale dialog", exception)
            initializeApplicationWithDegradedMode()
        }
    }
    
    /**
     * 显示权限永久拒绝对话框
     */
    private fun showPermissionPermanentlyDeniedDialog(deniedPermissions: List<String>) {
        try {
            val message = buildString {
                append("以下权限被永久拒绝：\n\n")
                deniedPermissions.forEach { permission ->
                    append("• ${getPermissionDescription(permission)}\n")
                }
                append("\n请前往设置页面手动开启权限。")
            }
            
            AlertDialog.Builder(this)
                .setTitle("权限设置")
                .setMessage(message)
                .setPositiveButton("前往设置") { _, _ ->
                    openAppSettings()
                }
                .setNegativeButton("使用基础功能") { _, _ ->
                    initializeApplicationWithDegradedMode()
                }
                .setCancelable(false)
                .show()
        } catch (exception: Exception) {
            Log.e(TAG, "Failed to show permission permanently denied dialog", exception)
            initializeApplicationWithDegradedMode()
        }
    }
    
    /**
     * 获取权限描述
     */
    private fun getPermissionDescription(permission: String): String {
        return when (permission) {
            Manifest.permission.ACCESS_FINE_LOCATION -> "精确位置"
            Manifest.permission.ACCESS_COARSE_LOCATION -> "大致位置"
            Manifest.permission.POST_NOTIFICATIONS -> "通知"
            Manifest.permission.READ_MEDIA_IMAGES -> "图片访问"
            Manifest.permission.READ_MEDIA_VIDEO -> "视频访问"
            Manifest.permission.READ_MEDIA_AUDIO -> "音频访问"
            Manifest.permission.READ_EXTERNAL_STORAGE -> "存储访问"
            Manifest.permission.WRITE_EXTERNAL_STORAGE -> "存储写入"
            else -> permission.substringAfterLast(".")
        }
    }
    
    /**
     * 打开应用设置页面
     */
    private fun openAppSettings() {
        try {
            val intent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS).apply {
                data = Uri.fromParts("package", packageName, null)
            }
            settingsLauncher.launch(intent)
        } catch (exception: Exception) {
            Log.e(TAG, "Failed to open app settings", exception)
            Toast.makeText(this, "无法打开设置页面", Toast.LENGTH_SHORT).show()
            initializeApplicationWithDegradedMode()
        }
    }
    
    /**
     * 初始化应用 - 分阶段初始化
     */
    private fun initializeApplication() {
        if (isInitialized) {
            Log.d(TAG, "Application already initialized")
            return
        }
        
        Log.d(TAG, "Starting phased application initialization")
        
        try {
            lifecycleScope.launch {
                try {
                    // 先设置加载UI
                    setupLoadingUI()
                    
                    // 分阶段初始化应用组件
                    val success = initializeApplicationComponents()
                    
                    if (success) {
                        // 设置主UI内容
                        setupUIContent(hasFullPermissions = true)
                        isInitialized = true
                        isInitializationComplete = true
                        Log.d(TAG, "Application initialized successfully")
                    } else {
                        Log.w(TAG, "Some managers failed, falling back to degraded mode")
                        initializeApplicationWithDegradedMode()
                    }
                    
                } catch (exception: Exception) {
                    Log.e(TAG, "Failed to initialize application", exception)
                    initializationError = "初始化失败: ${exception.message}"
                    initializeApplicationWithDegradedMode()
                }
            }
        } catch (exception: Exception) {
            Log.e(TAG, "Failed to start application initialization", exception)
            initializationError = "启动失败: ${exception.message}"
            handleCriticalInitializationFailure(exception)
        }
    }
    
    /**
     * 初始化应用（降级模式）
     */
    private fun initializeApplicationWithDegradedMode() {
        if (isInitialized) {
            Log.d(TAG, "Application already initialized")
            return
        }
        
        Log.w(TAG, "Initializing application in degraded mode")
        
        try {
            lifecycleScope.launch {
                try {
                    // 初始化基础组件
                    initializeBasicComponents()
                    
                    // 设置UI内容（降级模式）
                    setupUIContent(hasFullPermissions = false)
                    
                    isInitialized = true
                    Log.d(TAG, "Application initialized in degraded mode")
                    
                    // 显示降级模式提示
                    if (hasPermissionDenied) {
                        Toast.makeText(this@MainActivity, "部分功能受限，建议开启所有权限", Toast.LENGTH_LONG).show()
                    }
                    
                } catch (exception: Exception) {
                    Log.e(TAG, "Failed to initialize application in degraded mode", exception)
                    handleCriticalInitializationFailure(exception)
                }
            }
        } catch (exception: Exception) {
            Log.e(TAG, "Failed to start degraded application initialization", exception)
            handleCriticalInitializationFailure(exception)
        }
    }
    
    /**
     * 分阶段初始化应用组件
     */
    private suspend fun initializeApplicationComponents(): Boolean {
        Log.d(TAG, "Starting phased manager initialization")
        
        val initializationJobs = mutableMapOf<String, Deferred<Boolean>>()
        val totalManagers = managerDependencies.size
        var completedManagers = 0
        
        // 获取初始化顺序
        val initializationOrder = getInitializationOrder()
        
        for (phase in initializationOrder) {
            Log.d(TAG, "Initializing phase: ${phase.joinToString(", ")}")
            initializationMessage = "正在初始化: ${phase.joinToString(", ")}..."
            
            // 并行初始化当前阶段的Manager
            val phaseJobs: List<Pair<String, Deferred<Boolean>>> = phase.map { managerName ->
                val dependency = managerDependencies[managerName]!!
                managerName to async(Dispatchers.IO) {
                    initializeManagerWithRetry(dependency)
                }
            }
            
            // 等待当前阶段完成
            for ((managerName, job) in phaseJobs) {
                try {
                    val success = job.await()
                    completedManagers++
                    initializationProgress = completedManagers.toFloat() / totalManagers
                    
                    if (!success) {
                        val dependency = managerDependencies[managerName]!!
                        if (!dependency.isOptional) {
                            Log.e(TAG, "Critical manager $managerName failed to initialize")
                            return false
                        } else {
                            Log.w(TAG, "Optional manager $managerName failed to initialize")
                        }
                    }
                } catch (e: Exception) {
                    Log.e(TAG, "Manager $managerName initialization threw exception", e)
                    val dependency = managerDependencies[managerName]!!
                    if (!dependency.isOptional) {
                        return false
                    }
                }
            }
        }
        
        initializationMessage = "初始化完成"
        Log.d(TAG, "Manager initialization completed")
        return true
    }
    
    /**
     * 获取初始化顺序（基于依赖关系的拓扑排序）
     */
    private fun getInitializationOrder(): List<List<String>> {
        val result = mutableListOf<List<String>>()
        val remaining = managerDependencies.keys.toMutableSet()
        val initialized = mutableSetOf<String>()
        
        while (remaining.isNotEmpty()) {
            val currentPhase = remaining.filter { managerName ->
                val dependencies = managerDependencies[managerName]?.dependencies ?: emptyList()
                dependencies.all { it in initialized }
            }
            
            if (currentPhase.isEmpty()) {
                // 检测到循环依赖，按剩余的任意顺序处理
                Log.w(TAG, "Possible circular dependency detected in remaining managers: $remaining")
                result.add(remaining.toList())
                break
            } else {
                result.add(currentPhase)
                remaining.removeAll(currentPhase.toSet())
                initialized.addAll(currentPhase)
            }
        }
        
        return result
    }
    
    /**
     * 带重试机制的Manager初始化
     */
    private suspend fun initializeManagerWithRetry(
        dependency: ManagerDependency,
        maxRetries: Int = 3
    ): Boolean {
        repeat(maxRetries) { attempt ->
            try {
                Log.d(TAG, "Initializing ${dependency.name} (attempt ${attempt + 1})")
                
                val success = dependency.initFunction()
                if (success) {
                    dependency.isInitialized.set(true)
                    Log.d(TAG, "${dependency.name} initialized successfully")
                    return true
                } else {
                    Log.w(TAG, "${dependency.name} initialization returned false")
                }
            } catch (e: Exception) {
                val errorMsg = "${dependency.name} initialization failed: ${e.message}"
                Log.e(TAG, errorMsg, e)
                dependency.initializationError = errorMsg
                
                if (attempt < maxRetries - 1) {
                    Log.d(TAG, "Retrying ${dependency.name} initialization...")
                    delay(1000L * (attempt + 1)) // 指数退避
                }
            }
        }
        
        Log.e(TAG, "${dependency.name} failed to initialize after $maxRetries attempts")
        return false
    }
    
    // Manager初始化方法
    private suspend fun initializeCoreManager(): Boolean {
        delay(500L) // 模拟初始化时间
        Log.d(TAG, "Core Manager initialized")
        return true
    }
    
    private suspend fun initializeNetworkManager(): Boolean {
        delay(800L)
        Log.d(TAG, "Network Manager initialized")
        return true
    }
    
    private suspend fun initializeStorageManager(): Boolean {
        delay(600L)
        Log.d(TAG, "Storage Manager initialized")
        return true
    }
    
    private suspend fun initializeAuthManager(): Boolean {
        delay(700L)
        Log.d(TAG, "Auth Manager initialized")
        return true
    }
    
    private suspend fun initializeLocationManager(): Boolean {
        if (ContextCompat.checkSelfPermission(this@MainActivity, Manifest.permission.ACCESS_FINE_LOCATION) 
            != PackageManager.PERMISSION_GRANTED) {
            Log.w(TAG, "Location permission not granted, Location Manager initialization skipped")
            return false
        }
        delay(400L)
        Log.d(TAG, "Location Manager initialized")
        return true
    }
    
    private suspend fun initializeNotificationManager(): Boolean {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU &&
            ContextCompat.checkSelfPermission(this@MainActivity, Manifest.permission.POST_NOTIFICATIONS) 
            != PackageManager.PERMISSION_GRANTED) {
            Log.w(TAG, "Notification permission not granted, Notification Manager initialization skipped")
            return false
        }
        delay(300L)
        Log.d(TAG, "Notification Manager initialized")
        return true
    }
    
    private suspend fun initializeMediaManager(): Boolean {
        delay(500L)
        Log.d(TAG, "Media Manager initialized")
        return true
    }
    
    private suspend fun initializeAIManager(): Boolean {
        delay(1000L) // AI初始化通常较耗时
        Log.d(TAG, "AI Manager initialized")
        return true
    }
    
    private suspend fun initializeSyncManager(): Boolean {
        delay(600L)
        Log.d(TAG, "Sync Manager initialized")
        return true
    }
    

    
    /**
     * 设置加载UI
     */
    private fun setupLoadingUI() {
        setContent {
            val systemDarkTheme = isSystemInDarkTheme()
            var isDarkTheme by remember { mutableStateOf(systemDarkTheme) }
            var useDynamicColor by remember { mutableStateOf(true) }
            
            YunQiaoSiNanTheme(
                darkTheme = isDarkTheme,
                dynamicColor = useDynamicColor
            ) {
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    if (isInitializationComplete) {
                        MainScreen(
                            onThemeChange = { dark, dynamic ->
                                isDarkTheme = dark
                                useDynamicColor = dynamic
                            }
                        )
                    } else {
                        InitializationScreen(
                            progress = initializationProgress,
                            message = initializationMessage,
                            error = initializationError
                        )
                    }
                }
            }
        }
    }
    
    /**
     * 设置UI内容
     */
    private fun setupUIContent(hasFullPermissions: Boolean) {
        try {
            // 更新状态以显示主界面
            isInitializationComplete = true
            Log.d(TAG, "UI content set successfully")
        } catch (exception: Exception) {
            Log.e(TAG, "Failed to setup UI content", exception)
            throw exception
        }
    }
    
    /**
     * 初始化进度界面
     */
    @Composable
    private fun InitializationScreen(
        progress: Float,
        message: String,
        error: String?
    ) {
        Box(
            modifier = Modifier.fillMaxSize(),
            contentAlignment = Alignment.Center
        ) {
            Column(
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.spacedBy(16.dp)
            ) {
                // 应用Logo/图标
                Card(
                    modifier = Modifier.size(80.dp),
                    elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)
                ) {
                    Box(
                        modifier = Modifier.fillMaxSize(),
                        contentAlignment = Alignment.Center
                    ) {
                        Text(
                            text = "云桥",
                            style = MaterialTheme.typography.headlineSmall
                        )
                    }
                }
                
                Spacer(modifier = Modifier.height(24.dp))
                
                if (error != null) {
                    // 错误状态
                    Column(
                        horizontalAlignment = Alignment.CenterHorizontally,
                        verticalArrangement = Arrangement.spacedBy(8.dp)
                    ) {
                        Icon(
                            imageVector = Icons.Default.Error,
                            contentDescription = "Error",
                            tint = MaterialTheme.colorScheme.error,
                            modifier = Modifier.size(48.dp)
                        )
                        Text(
                            text = "初始化失败",
                            style = MaterialTheme.typography.headlineSmall,
                            color = MaterialTheme.colorScheme.error
                        )
                        Text(
                            text = error,
                            style = MaterialTheme.typography.bodyMedium,
                            color = MaterialTheme.colorScheme.onSurfaceVariant
                        )
                        
                        Spacer(modifier = Modifier.height(16.dp))
                        
                        Button(
                            onClick = { 
                                initializationError = null
                                initializeApplication()
                            }
                        ) {
                            Text("重试")
                        }
                    }
                } else {
                    // 正常加载状态
                    Column(
                        horizontalAlignment = Alignment.CenterHorizontally,
                        verticalArrangement = Arrangement.spacedBy(8.dp)
                    ) {
                        CircularProgressIndicator(
                            progress = progress,
                            modifier = Modifier.size(48.dp),
                            strokeWidth = 4.dp
                        )
                        
                        Text(
                            text = "正在初始化应用",
                            style = MaterialTheme.typography.headlineSmall
                        )
                        
                        Text(
                            text = message,
                            style = MaterialTheme.typography.bodyMedium,
                            color = MaterialTheme.colorScheme.onSurfaceVariant
                        )
                        
                        // 进度百分比
                        Text(
                            text = "${(progress * 100).toInt()}%",
                            style = MaterialTheme.typography.bodySmall,
                            color = MaterialTheme.colorScheme.primary
                        )
                    }
                }
            }
        }
    }
    
    /**
     * 处理初始化失败
     */
    private fun handleInitializationFailure(exception: Exception) {
        Log.e(TAG, "Handling initialization failure", exception)
        
        try {
            // 尝试降级初始化
            initializeApplicationWithDegradedMode()
        } catch (degradedException: Exception) {
            Log.e(TAG, "Degraded initialization also failed", degradedException)
            handleCriticalInitializationFailure(degradedException)
        }
    }
    
    /**
     * 处理关键初始化失败
     */
    private fun handleCriticalInitializationFailure(exception: Exception) {
        Log.e(TAG, "Critical initialization failure", exception)
        
        try {
            // 显示错误信息并提供重试选项
            AlertDialog.Builder(this)
                .setTitle("应用启动失败")
                .setMessage("应用启动时遇到问题：${exception.message}\n\n是否重试启动？")
                .setPositiveButton("重试") { _, _ ->
                    recreate()
                }
                .setNegativeButton("退出") { _, _ ->
                    finish()
                }
                .setCancelable(false)
                .show()
        } catch (dialogException: Exception) {
            Log.e(TAG, "Failed to show critical error dialog", dialogException)
            // 最后的降级措施：显示Toast并退出
            Toast.makeText(this, "应用启动失败，即将退出", Toast.LENGTH_LONG).show()
            finish()
        }
    }
    
    override fun onResume() {
        super.onResume()
        
        try {
            Log.d(TAG, "onResume called")
            
            // 如果应用还未初始化，尝试重新初始化
            if (!isInitialized) {
                checkAndRequestPermissions()
            }
        } catch (exception: Exception) {
            Log.e(TAG, "Error in onResume", exception)
        }
    }
    
    override fun onDestroy() {
        try {
            Log.d(TAG, "onDestroy called")
            super.onDestroy()
        } catch (exception: Exception) {
            Log.e(TAG, "Error in onDestroy", exception)
        }
    }
}